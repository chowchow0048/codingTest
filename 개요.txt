출제빈도: 그리디 > 구현 > DFS/BFS탐색

복잡도:
    1. 시간복잡도: 특정크기의 입력에 대하여 알고리즘의 수행시간 분석
    2. 공간복잡도: 특정크기의 입력에 대하여 알고리즘의 메모리 사용량 분석
    빅오 표기법: 가장 빠르게 증가하는 항만을 고려하는 표기법
    상수 > 로그 > 선형 > 로그선형 > 이차 > 삼차 > 지수
    1     log   N     NlogN    N^2   N^3  2^N

일반적으로 CPU기반 개인 컴퓨터나 채점용 컴퓨터에서 연산 횟수가 5억을 넘어가는 경우, 
C언어는 1~3초, 파이썬은 5~15초 가량 시간소요
코딩테스트 문제의 시간제한은 통상 1~5초, 파이썬은 1초에 2천만번의 연산을 할것이라고 가정하는걸 추천

문제에서 가장 먼저 확인해야 하는 것은 시간제한(수행시간 요구사항).
시간제한이 1초인 문제를 만났을 때의 일반적 기준:
    N<500: O(N^3)
    N<2000: O(N^2)
    N<100000: O(NlogN)
    N<10000000: O(N)

일반적 문제해결 과정
    1. 지문읽기 및 컴퓨터적 사고
    2. 요구사항(분석도) 분석
    3. 문제해결을 위한 아이디어 찾기
    4. 소스코드 설계 및 코딩
      >> 대부분의 문제 출제자들은 핵심 아이디어를 캐치한다면, 간결하게 소스코드를
         작성할 수 있는 형태로 문제를 출제한다

일반적 알고리즘 문제 해결 과정:
import ime
start_time = time.time() # 시간측정 시작
end_time = time.time() # 시간측정 끝
print("time: ", end_time - start_time) # 수행시간 출력
